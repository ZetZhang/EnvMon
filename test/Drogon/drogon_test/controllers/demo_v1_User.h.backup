#pragma once

#include <drogon/HttpController.h>

using namespace drogon;

namespace myapp {
    struct User {
        std::string userName;
        std::string email;
        std::string address;
    };
}

namespace demo
{
namespace v1
{
inline myapp::User fromRequest(const HttpRequest &req)
{
    auto json = req.getJsonObject();
    myapp::User user;
    if (json) {
        user.userName = (*json)["name"].asString();
        user.email = (*json)["email"].asString();
        user.address = (*json)["address"].asString();
    }
    return user;
}

class User : public drogon::HttpController<User>
{
  public:
    METHOD_LIST_BEGIN
    // use METHOD_ADD to add your custom processing function here;
    // METHOD_ADD(User::get, "/{2}/{1}", Get); // path is /demo/v1/User/{arg2}/{arg1}
    // METHOD_ADD(User::your_method_name, "/{1}/{2}/list", Get); // path is /demo/v1/User/{arg1}/{arg2}/list
    // ADD_METHOD_TO(User::your_method_name, "/absolute/path/{1}/{2}/list", Get); // path is /absolute/path/{arg1}/{arg2}/list

        // 自定义handle和路径
        ADD_METHOD_TO(User::newUser, "/users", Post);

    METHOD_LIST_END
    // your declaration of processing function maybe like this:
    // void get(const HttpRequestPtr& req, std::function<void (const HttpResponsePtr &)> &&callback, int p1, std::string p2);
    // void your_method_name(const HttpRequestPtr& req, std::function<void (const HttpResponsePtr &)> &&callback, double p1, int p2) const;
    void login(const HttpRequestPtr &req,
            std::function<void (const HttpRequestPtr &)> &&callback,
            std::string &&userId,
            const std::string &password);
    void getInfo(const HttpRequestPtr &req,
            std::function<void (const HttpRequestPtr &)> &&callback,
            std::string userId,
            const std::string &token) const;
    // 自定义数据和处理函数模板
    void newUser(const HttpRequestPtr &req,
            std::function<void (const HttpRequestPtr &)> &&callback,
            myapp::User &&pNewUser) const;
    // 更进一步，如果不需要访问HttpRequestPtr对象，那么把自定义对象放到第一个参数也能完成映射
    void newUser_new(myapp::User &&pNewUser,
            std::function<void (const HttpResponsePtr &)> &&callback) const;
};
}
}
